{"mappings":"oeAAA,I,EAAAA,EAAA,SAAMC,OAEN,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,4BACnCE,eAAgBH,SAASC,cAAc,2BACvCG,YAAaJ,SAASC,cAAc,6BACpCI,UAAWL,SAASC,cAAc,gBAsBpC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA7BbV,EAAKC,KAAKiB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBACN,MAAMC,EAAQC,SAAStB,EAAKI,WAAWmB,OACjCC,EAAYF,SAAStB,EAAKK,eAAekB,OACzCE,EAASH,SAAStB,EAAKM,YAAYiB,OAEzC,IAAK,IAAIG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAAG,CAElClB,EAAckB,EAAE,EADKL,EAAQK,EAAIF,GAE9BG,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,MACVkB,EAAOC,QAAQ,uBAAqBpB,QAAiBC,MAAU,IAEvEoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAOG,QAAQ,sBAAoBtB,QAAeC,MAAU,G,CAGlEV,EAAKC,KAAK+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["const { Notify } = require(\"notiflix\");\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector(\"form input[name='delay']\"),\n  delayStepInput: document.querySelector(\"form input[name='step']\"),\n  amountInput: document.querySelector(\"form input[name='amount']\"),\n  submitBtn: document.querySelector('form button')\n};\nrefs.form.addEventListener('submit', onFormSubmit); \n\nfunction onFormSubmit(event) {\n  event.preventDefault(); \n  const delay = parseInt(refs.delayInput.value); \n  const delayStep = parseInt(refs.delayStepInput.value); \n  const amount = parseInt(refs.amountInput.value); \n  \n  for (let i = 0; i < amount; i += 1) {\n    const promiseDelay = delay + i * delayStep; \n    createPromise(i+1, promiseDelay)\n      .then(({ position, delay }) => {\n               Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  refs.form.reset();\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => { \n      if (shouldResolve) {\n        resolve({ position, delay }); \n      } else {\n        reject({ position, delay }); \n      }\n    }, delay);\n  });\n}"],"names":["parcelRequire","Notify","$47d4ff9957288465$var$refs","form","document","querySelector","delayInput","delayStepInput","amountInput","submitBtn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","parseInt","value","delayStep","amount","i","then","$47d4ff9957288465$require$Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.d4826b0d.js.map"}