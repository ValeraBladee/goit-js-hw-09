{"mappings":"gfAAA,I,EAAAA,EAAA,SAAMC,OAEAC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,4BACnCE,eAAgBH,SAASC,cAAc,2BACvCG,YAAaJ,SAASC,cAAc,6BACpCI,UAAWL,SAASC,cAAc,gBAsBpC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA7BPV,EAAKC,KAAKiB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAKN,IAJA,IAAMC,EAAQC,SAAStB,EAAKI,WAAWmB,OACjCC,EAAYF,SAAStB,EAAKK,eAAekB,OACzCE,EAASH,SAAStB,EAAKM,YAAYiB,OAEhCG,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAAG,CAElClB,EAAckB,EAAE,EADKL,EAAQK,EAAIF,GAE9BG,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACVmB,EAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAErEsB,OAAM,SAAAJ,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClBmB,EAAOI,QAAQ,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGhEV,EAAKC,KAAKiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["const { Notify } = require(\"notiflix\");\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector(\"form input[name='delay']\"),\n  delayStepInput: document.querySelector(\"form input[name='step']\"),\n  amountInput: document.querySelector(\"form input[name='amount']\"),\n  submitBtn: document.querySelector('form button')\n};\nrefs.form.addEventListener('submit', onFormSubmit); \n\nfunction onFormSubmit(event) {\n  event.preventDefault(); \n  const delay = parseInt(refs.delayInput.value); \n  const delayStep = parseInt(refs.delayStepInput.value); \n  const amount = parseInt(refs.amountInput.value); \n  \n  for (let i = 0; i < amount; i += 1) {\n    const promiseDelay = delay + i * delayStep; \n    createPromise(i+1, promiseDelay)\n      .then(({ position, delay }) => {\n               Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n  refs.form.reset();\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => { \n      if (shouldResolve) {\n        resolve({ position, delay }); \n      } else {\n        reject({ position, delay }); \n      }\n    }, delay);\n  });\n}"],"names":["parcelRequire","Notify","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","delayStepInput","amountInput","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","parseInt","value","delayStep","amount","i","then","param","$ce04d3a99e08e73b$require$Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.fde8a8e4.js.map"}